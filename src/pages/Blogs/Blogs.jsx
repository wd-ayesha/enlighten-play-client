const Blogs = () => {
  return (
    <div className="py-10 mx-10">
      <h2 className="text-center text-purple-950 text-4xl mb-14">Questions & Answers </h2>
      {/* 1st QA */}
      <div className="card mx-10 bg-fuchsia-400 mx-auto bg-base-100 shadow-xl mb-10">
        <div className="card-body">
          <h2 className="card-title">
            What is an access token and refresh token?
          </h2>
          <p>
            An access token and a refresh token are two important concepts in
            authentication and authorization systems, particularly in the
            context of web applications and APIs. They are used to grant and
            manage access to protected resources.
          </p>
          <p>
            1. Access Token: An access token is a credential that is used to
            access protected resources on behalf of an authenticated user. It is
            typically a string of characters that is generated by an
            authentication server or authorization server after a user
            successfully logs in or grants permission to an application. The
            access token contains information such as the user's identity and
            permissions.
          </p>
          <p>
            2. Refresh Token: A refresh token is a credential that is used to
            obtain a new access token without requiring the user to
            reauthenticate. It is typically issued alongside an access token
            during the initial authentication process. The refresh token is
            securely stored on the client side (e.g., in a browser's cookie or
            mobile app's storage) and is sent to the authorization server when
            the access token expires or becomes invalid.
          </p>
        </div>
      </div>
      {/* 2nd QA */}
      <div className="card mx-10 bg-fuchsia-400 mx-auto bg-base-100 shadow-xl mb-10">
        <div className="card-body">
          <h2 className="card-title">
            How do they work and where should we store them on the client-side?
          </h2>
          <p>
            Access tokens and refresh tokens work together in a typical
            authentication and authorization flow. Here's a high-level overview
            of how they are used: 1. Authentication 2. Token Generation 3.
            Access Token Usage 4. Resource Access 5. Token Expiration 6. Token
            Refresh 7. New Access Token 8. Repeat Steps 3-7. <br />
            Regarding where to
            store these tokens on the client-side, there are a few common
            approaches: 1. Cookies: 2. Local Storage 3. IndexedDB 4. In-Memory
            The choice of storage location depends on the specific requirements
            of the application, the level of security needed, and the
            client-side technology being used. It's essential to consider
            security best practices and protect tokens from unauthorized access
            or disclosure.
          </p>
        </div>
      </div>
      {/* 3rd QA */}
      <div className="card mx-10 bg-fuchsia-400 mx-auto bg-base-100 shadow-xl mb-10">
        <div className="card-body">
          <h2 className="card-title">Compare SQL and NoSQL databases?</h2>
          <p>
            SQL (Structured Query Language) and NoSQL (Not Only SQL) are two
            broad categories of database management systems that differ in their
            data models, query languages, scalability, and use cases. Here's a
            comparison of SQL and NoSQL databases: 1. Data Model: - SQL:  2. Query Language:  3. Scalability: 
            4. Flexibility and Agility:  5. Use Cases: - SQL: SQL databases are commonly used for
            applications that require complex queries, data integrity,
            transactions, and reporting. 
            
            They are prevalent in traditional
            enterprise systems, financial applications, and applications with
            well-defined data structures. 
            - NoSQL: NoSQL databases are
            well-suited for scenarios such as real-time analytics, content
            management systems, social media platforms, IoT applications, and
            scenarios where high scalability and agility are critical. It's
            important to note that the boundaries between SQL and NoSQL
            databases are not always clear-cut, and some databases may exhibit
            characteristics of both. Additionally, the choice between SQL and
            NoSQL depends on the specific requirements of your application, data
            structure, scalability needs, and development preferences.
          </p>
        </div>
      </div>
      {/* 4th QA */}
      <div className="card mx-10 bg-fuchsia-400 mx-auto bg-base-100 shadow-xl mb-10">
        <div className="card-body">
          <h2 className="card-title">What is express js? What is Nest JS?</h2>
          <p>
            Express.js and NestJS are both web application frameworks for
            building server-side applications, but they differ in terms of their
            design philosophy, architecture, and feature sets. 1. Express.js: -
            Express.js is a minimalistic and lightweight web framework for
            Node.js. It provides a simple and unopinionated approach to building
            web applications and APIs. - Express.js focuses on providing a
            robust set of foundational features and middleware to handle HTTP
            requests, routing, and basic application logic. - It allows
            developers to create server-side applications quickly and
            efficiently by leveraging JavaScript and Node.js ecosystem
            libraries. - Express.js provides flexibility and freedom for
            developers to structure and organize their code as per their
            preferences. - It is widely adopted and has a large community, which
            means there are numerous third-party libraries and resources
            available to enhance its functionality. 2. NestJS: - NestJS is a
            progressive, opinionated framework for building scalable and
            maintainable server-side applications. It is also built on top of
            Node.js and leverages TypeScript as its primary language. - NestJS
            draws inspiration from Angular and shares some similarities in terms
            of its architectural patterns, such as modules, decorators, and
            dependency injection. - It provides a highly modular and organized
            structure, allowing developers to create applications with clear
            separation of concerns. - NestJS embraces the concept of
            "opinionated configuration," meaning it encourages certain design
            patterns and best practices out of the box. - It offers a powerful
            CLI (Command Line Interface) for scaffolding and generating
            boilerplate code, making it easier to get started with new projects.
            - NestJS integrates well with other libraries and frameworks, such
            as Express.js, allowing developers to leverage existing Express
            middleware or gradually migrate existing Express applications to
            NestJS. Overall, while Express.js provides a lightweight and
            flexible framework for building Node.js applications, NestJS takes a
            more structured and opinionated approach, borrowing concepts from
            Angular to create scalable and maintainable server-side
            applications. The choice between the two depends on the project
            requirements, development preferences, and the desired level of
            structure and organization.
          </p>
        </div>
      </div>
      {/* 5th QA */}
      <div className="card mx-10 bg-fuchsia-400 mx-auto bg-base-100 shadow-xl mb-10">
        <div className="card-body">
          <h2 className="card-title">
            What is MongoDB aggregate and how does it work?
          </h2>
          <p>
            In MongoDB, the aggregate method is a powerful feature that allows
            you to perform advanced data processing and analysis operations on
            your data. It enables you to apply a sequence of transformations,
            known as an aggregation pipeline, to your documents. The aggregate
            method takes an array of stages as input, where each stage
            represents a specific operation in the pipeline. Here's an overview
            of how the MongoDB aggregation pipeline works: 1. Match Stage: This
            stage filters documents based on specific criteria. It works
            similarly to the find method by using query operators to match
            documents that meet the specified conditions. 2. Group Stage: This
            stage groups documents together based on a specified key and applies
            aggregate functions to the grouped data. You can perform operations
            like counting, summing, averaging, and more on the grouped data. 3.
            Project Stage: This stage allows you to reshape the documents in the
            pipeline by specifying which fields to include or exclude. It also
            supports computing new fields or applying expressions to existing
            fields. 4. Sort Stage: This stage sorts the documents in the
            pipeline based on one or more fields. You can specify ascending or
            descending order for each field. 5. Limit Stage: This stage limits
            the number of documents that pass through the pipeline, allowing you
            to retrieve a specific number of results. 6. Skip Stage: This stage
            skips a specified number of documents in the pipeline, useful for
            pagination or skipping initial results. 7. Unwind Stage: This stage
            "unwinds" an array field, creating a separate document for each
            element in the array. This is helpful when you want to perform
            further operations on the individual array elements. 8. Lookup
            Stage: This stage performs a left outer join between two
            collections, combining documents from both collections based on a
            specified field. These are just a few examples of the stages
            available in the MongoDB aggregation pipeline. You can combine
            multiple stages in a pipeline to perform complex data
            transformations, calculations, and aggregations. The resulting
            output of the aggregate method is a cursor, which you can iterate
            over to access the processed documents. The cursor provides the
            aggregated results based on the defined stages in the pipeline.
            MongoDB's aggregation framework provides a versatile and efficient
            way to perform data manipulations and analysis within the database
            itself, reducing the need for client-side processing. It is
            particularly useful for scenarios where you need to aggregate,
            group, and transform data before retrieving it.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Blogs;